class  
{
	public static void main(String[] args) 
	{
		/*세상의 어떤 컴퓨터도 이 문자열들을 이해하지 못한다!! 컴퓨터는 0,1이라는 이진값만 이해한다!!
ex) 00010101010?
아래의 코드는 컴퓨터를 위한게아님 인간 즉 개발자들이 컴퓨터에게 하고 싶은 표현을 한것이고,
이러한 코드를 원본소스라한다!! 따라서 아래의 원본소스를 컴퓨터가 이해할 수 있는 이진화된 코드로 바꿔야하는데,
이 과정을 컴파일(compile)이라 한다!!
1단계 컴파일하자!!
	jdk 도구에는 자바언어를 개발하는데 필요한 프로그램이 탑재되어있다...
	따라서 이 안에는 이미 컴파일러도 포함되어있다..
	우리의 경우 컴파일 프로그램은 C:\Java\jdk1.8.0_251\bin에 존재한다!!
	따라서 path 환경변수에 저 경로를 등록했다면 어디서건 bin 디렉토리 안에있는 실행파일들을 사용할 수 있다..
	ex) javac.exe는 어디서건 수행되었음..
2단계 실행하자!!*/
class  MyName{
	/*
	[변수와 자료형]
	1.자바언어에서 사용가능한 데이터의 종류는?
		1)숫자
			실수 : 소수점까지 표현가능한 수
					float, double
			정수 : 소수점을 제외한 수
					byte, short, int, long
		2)문자 : char 
		3)논리값 : boolean
	2.자료형을 사용하는 이유는? 왜 세분화 시켰을까?
		1) 데이터가 메모리에 올라갈때, 어떤 용량을 차지할지를 결정 짓는 기준이 되기때문에
			아래의 코드는 모두 정수이지만, 자료형에 따라서 메모리를 차지하는 용량이 다르다!!
			하지만 걱정하지말자 거의 int 만 쓴다 (why 가장 자주 사용하므로 빠른 속도로 처리됨)
			ex)	byte b= 5;		1byte 차지
					short s =7;	2byte 차지
					int x = 19;		4byte 차지
					long k =3;		8byte 차지

					float y = 5.8			4byte 차지
					double d =	 3.55		8byte차지
					자바는 다국어를 지원하므로, 기본이 2byte이다!!
					char c='하'					2byte 차지
					boolean z = true;		1byte 차지
	*/
	public static void main(String[] args) {
		/*자바는 컴파일 기반의 언어이므로, 컴파일 전에 이미 데이터의 종류가 명시되어 있어야한다. 
		즉 개발자가 이 데이터를 숫자로할지, 문자로할지, 논리값으로 처리할지 컴파일러에게 알려줘야한다..
		이때 사용하는 기법이 바로 자료형이다!! 아래의 예제는 정수형 자료형을 명시한 것이다..*/
		int x=1;
		/*자브스크립트의 경우
		var x=1; 이라고 했을떄, 저 x값이 숫자형인지 여부에 대한 판단은 실행할때 인터프리터에 의해 결정된다
		따라서 실행시마다 자료형에 대한 판든을 일일이 하므로, 컴파일 방식의 언어에 비해 속도가 느리다..
		그대신 개발의 편의성이 있다.. 그리고 자료형을 개발자가 정하지 않아도 되는 편의성이 있다..
		따라서 비전공자들이 쉽게 이용할 수 있는 언어..*/
		//System.out.println("x값은 "+x);
		//연산자도 다른 언어와 같으므로, 공부할게 없다.. 단 약간의 차이가 있다
		int k = (true) ? 2 : 0;
		System.out.println("결과는" + k);
	}
}

	}
}
